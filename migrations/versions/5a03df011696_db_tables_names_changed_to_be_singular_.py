"""DB tables names changed to be singular ones

Revision ID: 5a03df011696
Revises: eab5cb43e015
Create Date: 2020-07-04 23:05:07.687171

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5a03df011696'
down_revision = 'eab5cb43e015'
branch_labels = None
depends_on = None


def upgrade():
    # Must be dropped before posts.
    op.drop_table('comments')
    op.drop_table('posts')
    # Must be dropped before roles and users.
    op.drop_constraint(
        'roles_users_user_id_fkey',
        'roles_users',
        type_='foreignkey'
    )
    # Must be dropped before roles and users.
    op.drop_constraint(
        'roles_users_role_id_fkey',
        'roles_users',
        type_='foreignkey'
    )
    op.drop_table('roles')
    op.drop_table('users')
    op.drop_table('roles_users')

    op.create_table(
        'post',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(length=150), nullable=True),
        sa.Column('body', sa.Text(), nullable=True),
        sa.Column('created', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'role',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=80), nullable=True),
        sa.Column('description', sa.String(
            length=255), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )
    op.create_table(
        'user',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(
            length=80), nullable=False),
        sa.Column('password_hash', sa.String(
            length=150), nullable=False),
        sa.Column('active', sa.Boolean(), nullable=True),
        sa.Column('created_on', sa.DateTime(), nullable=True),
        sa.Column('updated_on', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('username')
    )
    op.create_table(
        'comment',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('author', sa.String(length=150), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('site', sa.String(length=255), nullable=True),
        sa.Column('post_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['post_id'], ['post.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table(
        'roles_users',
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('role_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], )
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'roles_users', type_='foreignkey')
    op.drop_constraint(None, 'roles_users', type_='foreignkey')
    op.create_foreign_key(
        'roles_users_role_id_fkey',
        'roles_users',
        'roles',
        ['role_id'],
        ['id']
    )
    op.create_foreign_key('roles_users_user_id_fkey',
                          'roles_users',
                          'users',
                          ['user_id'],
                          ['id']
                          )
    op.create_table(
        'posts',
        sa.Column(
            'id',
            sa.INTEGER(),
            server_default=sa.text("nextval('posts_id_seq'::regclass)"),
            autoincrement=True, nullable=False
        ),
        sa.Column('title', sa.VARCHAR(length=150),
                  autoincrement=False, nullable=True),
        sa.Column('body', sa.TEXT(),
                  autoincrement=False, nullable=True),
        sa.Column('created', postgresql.TIMESTAMP(),
                  autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint('id', name='posts_pkey'),
        postgresql_ignore_search_path=False
    )
    op.create_table(
        'users',
        sa.Column('id', sa.INTEGER(),
                  autoincrement=True, nullable=False),
        sa.Column('username', sa.VARCHAR(length=80),
                  autoincrement=False, nullable=False),
        sa.Column('password_hash', sa.VARCHAR(length=150),
                  autoincrement=False, nullable=False),
        sa.Column('created_on', postgresql.TIMESTAMP(),
                  autoincrement=False, nullable=True),
        sa.Column('updated_on', postgresql.TIMESTAMP(),
                  autoincrement=False, nullable=True),
        sa.Column('active', sa.BOOLEAN(),
                  autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint('id', name='users_pkey'),
        sa.UniqueConstraint('username', name='users_username_key')
    )
    op.create_table(
        'roles',
        sa.Column('id', sa.INTEGER(),
                  autoincrement=True, nullable=False),
        sa.Column('name', sa.VARCHAR(length=80),
                  autoincrement=False, nullable=True),
        sa.Column('description', sa.VARCHAR(length=255),
                  autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint('id', name='roles_pkey'),
        sa.UniqueConstraint('name', name='roles_name_key')
    )
    op.create_table(
        'comments',
        sa.Column('id', sa.INTEGER(),
                  autoincrement=True, nullable=False),
        sa.Column('author', sa.VARCHAR(length=150),
                  autoincrement=False, nullable=False),
        sa.Column('email', sa.VARCHAR(length=255),
                  autoincrement=False, nullable=False),
        sa.Column('site', sa.VARCHAR(length=255),
                  autoincrement=False, nullable=True),
        sa.Column('post_id', sa.INTEGER(),
                  autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ['post_id'],
            ['posts.id'],
            name='comments_post_id_fkey'
        ),
        sa.PrimaryKeyConstraint('id', name='comments_pkey')
    )
    op.drop_table('comment')
    op.drop_table('user')
    op.drop_table('role')
    op.drop_table('post')
    # ### end Alembic commands ###
